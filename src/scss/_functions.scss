@use "sass:math";

@function real-color($color) {
  @return type-of($color) == "color" and $color != "none" and $color != transparent and $color != currentColor and $color != inherit and $color != initial;
}

// 1 up to 4 decimals only
@function decimal-round($number:0, $decimals:0) {
  @if $decimals == 1 {
    @return round($number * 10) * .1;
  } @else if $decimals == 2 {
    @return round($number * 100) * .01;
  } @else if $decimals == 3 {
    @return round($number * 1000) * .001;
  } @else if $decimals == 4 {
    @return round($number * 10000) * .0001;
  } @else {
    @return round($number);
  }
}

@function real-size($size, $rem:0) { // all unit sizes, except %
  $result: 0;

  @if type-of($size) == "number" {
    $unit: math.unit($size);

    @if $rem != 0 {
      @if $unit == "rem" {
        $result: $size;
      } @else if $unit == "em" {
        $result: $size * 1rem;
      } @else if $unit == "px" {
        $result: decimal-round($size * .0625, 2) * 1rem; // 1/16 = 0.0625
      } @else { // no unit
        $result: $size * 1rem;
      }
    } @else {
      @if $unit == "rem" {
        $result: $size * 16px;
      } @else if $unit == "em" {
        $result: $size * 16px;
      } @else { // no unit
        $result: $size * 1px;
      }
    }

    // @debug($result);
  }

  @return $result;
}

@function sum-size($a:0, $b:0) {
  $result: 0;

  @if type-of($a) == "number" and type-of($b) == "number" {
    @if unit($a) != unit($b) {
      @if unit($a) == "rem" or unit($b) == "rem" {
        $result: real-size($a,1) + real-size($b,1);
      } @else {
        $result: real-size($a) + real-size($b);
      }
    } @else {
      $result: $a + $b;
    }
  }

  @return $result;
}

@function get-icon-height() {
  $height: $icon_height;

  @if $icon_height == auto or $icon_height == inherit or $icon_height == 0 or type-of($icon_height) != "number" {
    @if type-of($root_item_line_height) == "number" and type-of($subnav_item_line_height) == "number" {
      @if real-size($root_item_line_height) > real-size($subnav_item_line_height) {
        $height: $subnav_item_line_height;
      } @else {
        $height: $root_item_line_height;
      }
    } @else if type-of($subnav_line_height) == "number" and type-of($navbar_line_height) == "number" {
      @if real-size($navbar_line_height) > real-size($subnav_line_height) {
        $height: $subnav_line_height;
      } @else {
        $height: $navbar_line_height;
      }
    } @else if type-of($subnav_line_height) == "number" {
      $height: $subnav_line_height;
    } @else if type-of($navbar_line_height) == "number" {
      $height: $navbar_line_height;
    } @else {
      $height: 16px; // ICONS MUST HAVE A SIZE
    }
  }

  @return $height;
}

@function get-color($color, $bg, $alpha: 1) {
  $result: $color;

  @if real-color($color) {
    $result: $color;
  } @else if $color == currentColor {
    $result: currentcolor;
  } @else if $color == auto and real-color($bg) {
    @if lightness($bg) > 60 {
      $result: rgba(#000, $alpha);
    } @else {
      $result: rgba(#fff, $alpha);
    }

    // if transparent, cancel rule
  } @else {
    $result: unset;
  }

  @return $result;
}

/* $color: text-color, $bg: bg-color, $inherit-bg: used when $bg is undefined/transparent */
@function get-item-color($color, $bg, $inherit-bg, $alpha: 1) {
  $item-color: $color;
  $item-bg: $bg;

  @if real-color($bg) {
    $item-bg: $bg;
  } @else if real-color($inherit-bg) {
    $item-bg: $inherit-bg;
  }

  @if lightness($item-bg) > 60 {
    $item-color: #000;
  } @else {
    $item-color: #fff;
  }

  @if $alpha < 1 {
    @return rgba($item-color, $alpha);
  } @else {
    @return $item-color;
  }

}

// STYLING UTIL MIXINS
@mixin set-background($bg) {
  @if type-of($bg) == "list" or real-color($bg) {
    background: $bg;
  } @else if $bg == currentColor {
    background: currentcolor;

    // } @else {
    // @debug "set-background(#{$bg}); value-type '#{type-of($bg)}:#{$bg}' is ignored, style rule removed.";
  }
}

@mixin set-color($color, $bg, $alpha) {
  $result: get-color($color, $bg, $alpha);

  @if $result != inherit {
    color: $result;
  }
}

@mixin set-metric($prop, $value, $inherited:0) {
  @if $value == inherit and (type-of($inherited) == "list" or type-of($inherited) == "number" and $inherited != 0) {
    #{$prop}: $inherited;
  } @else if type-of($value) == "list" {
    $total-size: 0;

    @each $one in $value {
      @if real-size($one) {
        $total-size: sum-size($one,$total-size);
      } @else if type-of($one) == "color" {
        $total-size: sum-size(1,$total-size);
      }
    }

    @if $total-size > 0 or $value {
      #{$prop}: $value;
    }

  } @else if type-of($value) == "number" and $value != 0 {
    #{$prop}: $value;

    // } @else {
  }

  // @debug "set-metric(#{$prop},#{$value},#{$inherited});  value-type '#{type-of($value)}:#{$value}' is ignored, style rule removed.";
}
