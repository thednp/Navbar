// MIXINS - DEFAULT STYLING, LAYOUT & ANIMATION
@import "functions";

@mixin navbar-mobile-layout($include:0) {
  #{if($include !=0, '&.navbar', '.navbar')} {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-between;
    font-size: $navbar_font_size;

    // global line-height, this stays here as authored
    line-height: $navbar_line_height;

    // set navbar padding
    @if type-of($navbar_padding) == "number" or type-of($navbar_padding) == "list" {
      padding: $navbar_padding;
    } @else {
      padding: 0;
    }

    > div {
      display: none;
      flex-basis: 100%;
      flex-direction: column;
      flex-grow: 1;
    }
    &.open-mobile > div {
      display: flex;
    }
    .nav {
      flex-direction: column;
    }
    .brand {
      display: flex;
      align-items: center;
      text-decoration: none;
      white-space: nowrap;
      @include set-metric("padding", $brand_padding);
      @include set-metric("font-size", $brand_font_size);
      @include set-metric("line-height", $brand_line_height);
    }
  }
}

@mixin navbar-desktop-layout($include:0) {
  @media (min-width: $responsive_breakpoint) {
    #{if($include !=0, '&.navbar', '.navbar')} {
      flex-direction: row;
      flex-wrap: nowrap;
      align-items: center;
      justify-content: flex-start;

      > div {
        display: flex;
        flex-basis: auto;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
      }
      .nav {
        flex-direction: row;
      }
    }
  }
}

@mixin navbar-desktop-side-layout($include:0) {
  @media (min-width: $responsive_breakpoint) {
    #{if($include !=0, '&.navbar', '.navbar')} {
      flex-flow: column nowrap;
      justify-content: flex-start;
      height: 100%;
      > div {
        display: flex;
        flex-direction: column;
      }
      .nav {
        flex-direction: column;
      }
    }
  }
}

@mixin navbar-style($include:0) {
  // navbar content
  .navbar-content,
  .subnav-content {
    a:not([class]), b {
      @include set-color($navbar_link_color, $navbar_background, .75);
    }
  }
  @media (min-width: $responsive_breakpoint) {
    .navbar-content {
      a:not([class]):hover {
        @include set-color($navbar_link_color_hover, $navbar_background, .95);
      }
    }
  }

  // navbar colors
  #{if($include !=0, '&.navbar', '.navbar')} {
    @include set-background($navbar_background);
    @include set-color($navbar_text_color, $navbar_background, .55);
    .brand {
      @include set-color($brand_link_color, $navbar_background, .85);
    }
    @media (min-width: $responsive_breakpoint) {
      .brand {
        @include set-background($brand_link_background);
        @if real-color($brand_link_background) {
          @include set-color($brand_link_color, $brand_link_background, .85);
        } @else {
          @include set-color($brand_link_color, $navbar_background, .85);
        }
        &:hover {
          @include set-background($brand_link_background_hover);
          @if real-color($brand_link_background_hover) {
            @include set-color($brand_link_color_hover, $brand_link_background_hover, .95);
          } @else if real-color($brand_link_background) {
            @include set-color($brand_link_color_hover, $brand_link_background, .95);
          } @else {
            @include set-color($brand_link_color, $navbar_background, .95);
          }
        }
      }
    }
  }

  // navbar toggles
  .subnav-toggle,
  .navbar-toggle {
    color: currentColor;
    background: transparent;
    &:focus {
      color: $navbar_background;
      outline: none;
      @if lightness($navbar_background) > 60 {
        background: rgba(#000, .75);
      } @else {
        background: rgba(#fff, .75);
      }
    }
  }
  .open-mobile {
    > .subnav-toggle:not(:focus),
    > .navbar-toggle:not(:focus) {
      color: currentColor;
      border-color: currentColor;
    }
  }
}

// menu layout
@mixin nav-layout($noWrapper:0) {
  .nav li > a,
  .nav li > span,
  .navbar-content,
  .subnav-content {
    @include set-metric("padding", $root_item_padding);
  }

  // general item layout
  .nav > li,
  .row > li,
  .subnav > li,
  .subnav-toggle + ul > li,
  .subnav-toggle + div > li,
  .nav li > span, .nav li > a {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: center;
    justify-content: space-between;
  }

  .nav {
    // set flex
    display: flex;

    // set base typo
    @if $noWrapper != 0 {
      @include set-metric("line-height", $navbar_line_height);
      @include set-metric("font-size", $navbar_font_size);
    }

    // reset any spacing or LI styling
    &, ul {
      padding: 0;
      margin: 0;
      list-style: none;
    }

    li {
      @if real-color($mobile_expanded_background) or $mobile_expanded_background == auto {
        transition: margin .3s ease 0s;
      }
    }

    li > span,
    li > a {
      overflow: hidden;
      @include set-metric("font-size",$root_item_font_size,$navbar_font_size);
      @include set-metric("line-height",$root_item_line_height,$navbar_line_height);
    }

    li > a { text-decoration: none; }

    // the ellipsis span element
    li > span > span,
    li > a > span {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
  }
  // toggles
  .subnav-toggle,
  .navbar-toggle {
    @include set-metric("border-radius", $base_radius);
    display: flex;
    align-items: center;
    align-self: center;
    padding: $navbar_toggle_padding;
    margin: auto $item_horizontal_spacing;
    border: 1px solid transparent;
  }
  // .open-mobile
  li.open-mobile > .subnav-toggle + ul,
  li.open-mobile > .subnav-toggle + div,
  li.open-mobile > .subnav {
    display: block;
  }
  .open-mobile {
    + .open-mobile {
      @if real-color($mobile_expanded_background) or $mobile_expanded_background == auto {
        margin-top: $item_vertical_spacing;
      }
    }
  }
  // mobile view content closed state
  .parent-icon,
  .subnav-toggle + ul,
  .subnav-toggle + div,
  .subnav {display: none;}

  // content spacing
  .subnav-content {
    p, ul {
      margin-bottom: $item_vertical_spacing;
    }
  }

  // mobile view tree highlight padding
  ul.subnav,
  div.subnav ul {
    flex-basis: 100%;
    flex-direction: column;
    flex-grow: 1;
    padding: 0 0 0 $item_horizontal_spacing;
  }
  div.subnav {
    flex-basis: 100%;
  }

  // menu icons
  @include navbar-icon();
  .menu-icon + span {
    flex: auto;
    margin-left: $item_vertical_spacing;
  }

  @media (min-width: $responsive_breakpoint) {
    .row > li {
      align-content: flex-start;
    }
    nav li, .nav li {
      position: relative;
    }
    // show icons and megamenu columns
    .parent-icon,
    .subnav-toggle + ul,
    .subnav-toggle + div {
      display: block;
    }
    // disable focus on hidden menu items
    ul.subnav > li,
    div.subnav > ul > li { display: none; }
    .open-position {
      > ul.subnav > li,
      > div.subnav > ul > li { display: flex; }
    }
    // toggles are hidden
    .subnav-toggle,
    .navbar-toggle { display: none; }
    // set submenu desktop view
    .subnav {
      position: absolute;
      display: block;
      opacity: 0;
      // set base typo
      @include set-metric("line-height", $subnav_line_height, $navbar_line_height);
      @include set-metric("font-size", $subnav_font_size, $navbar_font_size);
      li > span,
      li > a {
        @include set-metric("font-size",$subnav_item_font_size,$subnav_font_size);
        @include set-metric("line-height",$subnav_item_line_height,$subnav_line_height);
      }
    }
    // reset menu tree highlight padding
    ul.subnav,
    div.subnav ul {
      flex-direction: row;
      padding: 0;
    }
    // reset open-mobile
    @if real-color($mobile_expanded_background) or $mobile_expanded_background == auto {
      li.open-mobile {
        background: none;
        transition: none;
        + .open-mobile {margin: 0;}
      }
    }
    // adjust column title
    .column-title,
    div.subnav > ul > li > span {
      font-size: 120%;
    }
    // override flex-basis
    .subnav li > a,
    .subnav li > span {
      flex-basis: 100%;
    }
    // override content padding
    .subnav li > a,
    .subnav li > span,
    .subnav-content {
      @include set-metric("padding",$subnav_item_padding,$root_item_padding);
    }

    // determine offset
    $offset: 0;
    @if type-of($navbar_padding) == "number" and real-size($navbar_padding) > 0 {
      $offset: $navbar_padding;
    } @else if type-of($navbar_padding) == "list" and length($navbar_padding) == 2 {
      $offset: nth($navbar_padding,1);
    } @else if type-of($navbar_padding) == "list" and length($navbar_padding) > 2 {
      $offset: nth($navbar_padding,3);
    }
    // determine margin
    $consolidated_margin: 0;
    @if type-of($subnav_margin) == "number" {
      $consolidated_margin: sum-size($subnav_margin, $offset) 0 0;
    } @else if type-of($subnav_margin) == "list" and length($subnav_margin) == 2 {
      $mt: sum-size(nth($subnav_margin,1), $offset);
      $mb: nth($subnav_margin,1);
      $mh: nth($subnav_margin,2);
      $consolidated_margin: $mt $mh $mb;
    } @else if type-of($subnav_margin) == "list" and length($subnav_margin) == 3 {
      $mt: sum-size(nth($subnav_margin,1), $offset);
      $mb: nth($subnav_margin,3);
      $mh: nth($subnav_margin,2);
      $consolidated_margin: $mt $mh $mb;
    } @else if type-of($subnav_margin) == "list" and length($subnav_margin) == 4 {
      $mt: sum-size(nth($subnav_margin,1), $offset);
      $mh: nth($subnav_margin,2);
      $mb: nth($subnav_margin,3);
      $ml: nth($subnav_margin,4);
      $consolidated_margin: $mt $mh $mb $ml;
    }

    // set LVL1 subnav spacing
    .nav > li > .subnav {
      @include set-metric("margin",$consolidated_margin); // includes offset offset
      @include set-metric("padding",$subnav_padding);
    }

    // set width
    ul.subnav { // regular submenu
      @include set-metric("width",$subnav_width);
    }
    div.subnav { // mega submenu
      > ul {margin: 0;}
      // determine larger width with padding in mind
      @if type-of($subnav_padding) == "number" and $subnav_padding !=0 {
        min-width: calc(#{$subnav_larger_width} + #{$subnav_padding*2});
        &.m1 { min-width: calc(#{$subnav_width} + #{$subnav_padding*2}); }
        &.m2 { min-width: calc(#{$subnav_width*2} + #{$subnav_padding*2}); }
        &.m3 { min-width: calc(#{$subnav_width*3} + #{$subnav_padding*2}); }
        &.m4 { min-width: calc(#{$subnav_width*4} + #{$subnav_padding*2}); }
      } @else {
        min-width: $subnav_larger_width;
        &.m1 { min-width: $subnav_width; }
        &.m2 { min-width: #{$subnav_width*2}; }
        &.m3 { min-width: #{$subnav_width*3}; }
        &.m4 { min-width: #{$subnav_width*4}; }
      }
    }
  }
}

// NAV STYLE
@mixin nav-style($include:0) {
  // local variables
  $root_item_bg: transparent;
  $root_item_bg_hover: transparent;

  // determine root item background
  @if real-color($root_item_background) {
    $root_item_bg: $subnav_item_background;
  } @else if real-color($navbar_background) {
    $root_item_bg: $navbar_background;
  }
  @if real-color($root_item_hover_background) {
    $root_item_bg_hover: $root_item_hover_background;
  } @else if real-color($navbar_background) {
    $root_item_bg_hover: $navbar_background;
  }

  // begin nav
  #{if($include !=0, '&.nav', '.nav')} {
    // responsive view color
    li > a,
    li > span {
      @include set-color($root_item_color,$root_item_bg,.55);
    }
    // background only apply to LI.open-mobile view
    li.open-mobile {
      @if $mobile_expanded_background == auto {
        @if real-color($navbar_background) {
          @if lightness($navbar_background) < 35 {
            background: rgba(255,255,255,.075);
          } @else {
            background: rgba(0,0,0,.075);
          }
        }
      } @else {
        @include set-background($mobile_expanded_background);
      }
    }

    @media (min-width: $responsive_breakpoint) {
      // root menu item background
      > li {
        > span,
        > a {
          @include set-background($root_item_background);
        }
      }
      // menu item colors
      // root hover
      > li.open,
      > li:hover {
        > span,
        > a {
          @include set-background($root_item_hover_background);
          @include set-color($root_item_hover_color,$root_item_bg_hover,.75);
        }
      }
      // root active
      > li.active,
      > li.active.open,
      > li.active:hover {
        > span,
        > a {
          @include set-background($root_item_active_background);
          @include set-color($root_item_active_color,$root_item_active_background,.95);
        }
      }
    }
  }
}

// SUBNAV STYLE
@mixin subnav-style() {
  // local variables
  $subnav_bg: $subnav_background;
  $subnav_item_bg: transparent;
  $subnav_item_bg_hover: transparent;

  // determine $subnav_background
  @if $subnav_background == inherit and real-color($navbar_background) {
    @if lightness($navbar_background) > 35 {
      $subnav_bg: darken($navbar_background,5%);
    } @else {
      $subnav_bg: lighten($navbar_background,5%);
    }
  }
  // determine submenu item background
  @if real-color($subnav_item_background) {
    $subnav_item_bg: $subnav_item_background;
  } @else if real-color($subnav_bg) {
    $subnav_item_bg: $subnav_bg;
  }
  @if real-color($subnav_item_hover_background) {
    $subnav_item_bg_hover: $subnav_item_hover_background;
  } @else if real-color($subnav_bg) {
    $subnav_item_bg_hover: $subnav_bg;
  }
  @media (min-width: $responsive_breakpoint) {
    .subnav {
      // background
      @include set-background($subnav_bg);
      // box-shadow
      @include set-metric("box-shadow",$subnav_shadow);

      // submenu item
      li {
        > span,
        > a {
          @include set-background($subnav_item_background);
          @include set-color($subnav_item_color,$subnav_item_bg,.55);
        }
        > div {
          @include set-background($subnav_item_background);
        }

        // hover
        &.open,
        &:hover {
          > a {
            @include set-background($subnav_item_hover_background);
            @include set-color($subnav_item_hover_color,$subnav_item_bg_hover,.75);
          }
        }
        // active
        &.active,
        &.active:hover {
          > span,
          > a {
            @include set-background($subnav_item_active_background);
            @include set-color($subnav_item_active_color,$subnav_item_active_background, .95);
          }
        }
      }
    }
    @if real-color($subnav_bg) {
      @if lightness($subnav_bg) > 85 {
        .subnav .subnav {
          background: darken($subnav_bg,5%);
          .subnav {
            background: darken($subnav_bg,7.5%);
          }
        }
      } @else {
        .subnav .subnav {
          background: lighten($subnav_bg,5%);
          .subnav {
            background: lighten($subnav_bg,7.5%);
          }
        }
      }
    }
    // column title
    .column-title,
    div.subnav > ul > li > span {
      @include set-color($subnav_item_color,$subnav_item_bg,.95);
    }
    // a special case for span menu item text
    // div.subnav > ul > li > ul, // more than 5 compound selectors won't validate
    div.subnav li > ul,
    ul.subnav {
      > li.open,
      > li:hover {
        > span {
          @include set-background($subnav_item_hover_background);
          @include set-color($subnav_item_hover_color,$subnav_item_bg_hover,.8);
        }
      }
    }
    // submenu text colors
    div.subnav {
      @include set-color($subnav_text_color,$subnav_item_bg,.55);
    }
    .subnav-content {
      a:not([class]), b {
        @include set-color($subnav_link_color,$subnav_item_bg,.75);
      }
      a:not([class]):hover {
        @include set-color($subnav_link_color_hover,$subnav_item_bg,.95);
      }
    }
  }
}

// horizontal menu animation
@mixin main-menu($include:0) {
  #{if($include !=0, '&.nav', '.nav')} {
    @media (min-width: $responsive_breakpoint) {
      // animation
      li {
        > .subnav {
          top: -99999em; left: -99999em;
          transition: transform .5s ease, opacity .4s linear;
          transform: translate(0,-10px);
        }

        li > .subnav { transform: translate(-10px); }
        li.open-position > .subnav { top: 0; left: 100%; }
      }

      li.open-position > .subnav { top: 100%; left: 0; z-index: $subnav_zindex; }
      li.open > .subnav { opacity: 1; transform: translate(0); }
    }
  }
}

@mixin main-menu-rtl($include:0) {
  #{if($include !=0, '&.nav', '.nav')} {
    @media (min-width: $responsive_breakpoint) {
      // animation
      li {
        > .subnav {
          top: -99999em; right: -99999em; // dir=rtl won't like left: -99999em
          transition: transform .5s ease, opacity .4s linear;
          transform: translate(0,-10px);
        }

        li > .subnav { transform: translate(10px); }
        li.open-position > .subnav { top: 0; right: 100%; left: auto; }
      }

      li.open-position > .subnav { top: 100%; right: 0; left: auto; z-index: $subnav_zindex; }
      li.open > .subnav { opacity: 1; transform: translate(0); }
    }
  }
}

// vertical left-side animation
@mixin left-side($include:0) {
  #{if($include !=0, '&.nav', '.nav')} {
    flex-direction: column;
    @media (min-width: $responsive_breakpoint) {
      li {
        > .subnav {
          top: -99999em; left: -99999em;
          opacity: 0;
          transition: transform .5s ease, opacity .4s linear;
          transform: translate(-10px);
        }
        > a {
          flex-basis: 100%;
        }
      }
      li.open-position > .subnav { top: 0; left: 100%; z-index: $subnav_zindex; }
      li.open > .subnav { opacity: 1; transform: translate(0); }
    }
  }
}

// vertical right-side animation
@mixin right-side($include:0) {
  #{if($include !=0, '&.nav', '.nav')} {
    flex-direction: column;
    @media (min-width: $responsive_breakpoint) {
      li {
        > .subnav {
          top: -99999em;
          right: -99999em; left: auto;
          opacity: 0;
          transition: transform .5s ease, opacity .4s linear;
          transform: translate(10px);
        }
        > a {
          flex-basis: 100%;
        }
      }
      li.open-position > .subnav { top: 0; right: 100%; z-index: $subnav_zindex;}
      li.open > .subnav { opacity: 1; transform: translate(0); }
    }
  }
}

// NAVBAR ICON
@mixin navbar-icon() {
  $height: $icon_height;
  @if $icon_height == auto or $icon_height == inherit or $icon_height == 0 or type-of($icon_height) != "number" {

    @if type-of($root_item_line_height) == "number" and type-of($subnav_item_line_height) == "number" {
      @if real-size($root_item_line_height) > real-size($subnav_item_line_height) {
        $height: $subnav_item_line_height;
      } @else {
        $height: $root_item_line_height;
      }
    } @else if type-of($subnav_line_height) == "number" and type-of($navbar_line_height) == "number" {
      @if real-size($navbar_line_height) > real-size($subnav_line_height) {
        $height: $subnav_line_height;
      } @else {
        $height: $navbar_line_height;
      }
    } @else if type-of($subnav_line_height) == "number" {
      $height: $subnav_line_height;
    } @else if type-of($navbar_line_height) == "number" {
      $height: $navbar_line_height;
    } @else {
      $height: 16px; // ICONS MUST HAVE A SIZE
    }
  }

  // set rules
  .menu-icon,
  .parent-icon {
    width: $height;
    height: $height;
    line-height: $height;
    // font-size: round($height * 94/100*10)/10;
    text-align: center;
    fill: currentColor;
  }
  .menu-icon {
    font-size: decimal-round($height * .94, 1); // 94% = 0.94
  }
}
